# Copyright Â© 2021 United States Government as represented by the Administrator of the National Aeronautics and Space Administration.  All Rights Reserved.
# This ensures that the directory containing examples is in the python search directories 

"""
This example demonstrates the Polynomial Choas Expansion (PCE) Surrogate Direct Model functionality. PCE is a method by which the behavior of a model can be approximated by a polynomial. In this case the relationship between future loading and time of event. The result is a direct surrogate model that can be used to estimate time of event given a loading profile, without requiring the original model to be simulated. The resulting estimation is MUCH faster than simulating the model.

In this example, a PCE surrogate model is generated for the BatteryElectroChemEOD model. The surrogate is used to estimate time of event for a number of loading profiles. The result is compared to the actual time of event for the same loading profiles, which were generated by simulating the model.
"""

import chaospy as cp
import matplotlib.pyplot as plt
import numpy as np
from prog_models.models import BatteryElectroChemEOD
from prog_models.data_models import PCE
import scipy as sp

def run_example():
    DT = 0.5
    N_TEST_STEPS = 25
    N_SAMPLES = 250
    INPUT_CURRENT_DIST = cp.Uniform(3, 8)

    # Build Model
    m = BatteryElectroChemEOD(process_noise = 0) 
    m2 = PCE.from_model(m, {'i': INPUT_CURRENT_DIST}, dt=DT, max_time = 4000, discretization = 5, N=N_SAMPLES)

    # Test
    results = np.empty(N_TEST_STEPS, dtype=np.float64)
    gt = np.empty(N_TEST_STEPS, dtype=np.float64)
    x0 = m.initialize()

    def future_loading(t, x=None):
        return m.InputContainer(interpolator(t)[np.newaxis].T)

    TEST_SAMPLES = m2.parameters['J'].sample(size=N_TEST_STEPS, rule='latin_hypercube')
    for i in range(N_TEST_STEPS):
        interpolator = sp.interpolate.interp1d(m2.parameters['times'], TEST_SAMPLES[:, i])
        
        gt[i] = m.time_of_event(x0, future_loading, dt = DT)['EOD']
        results[i] = m2.time_of_event(x0, future_loading)['EOD']

    # Plot
    plt.scatter(gt, results)
    max_val = max(max(gt), max(results))
    plt.plot([0, max_val], [0, max_val], 'k--')
    plt.xlabel("Ground Truth (s)")
    plt.ylabel("PCE (s)")
    plt.show()

# This allows the module to be executed directly 
if __name__ == '__main__':
    run_example()
